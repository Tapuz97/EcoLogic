#!/usr/bin/env node

/**
 * EcoLogic WebApp Environment Setup Script
 * 
 * This script takes a Firebase service account JSON file and generates
 * a .env file with all the necessary environment variables for deployment.
 * 
 * Usage:
 * 1. Place your Firebase service account JSON file as 'firebase-key.json' in the project root
 * 2. Run: node setup-env.js
 * 3. The script will generate a .env file with all required variables
 * 
 * Required Firebase JSON structure:
 * {
 *   "type": "service_account",
 *   "project_id": "your-project-id",
 *   "private_key_id": "your-private-key-id",
 *   "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
 *   "client_email": "your-service-account@your-project.iam.gserviceaccount.com",
 *   "client_id": "your-client-id",
 *   "auth_uri": "https://accounts.google.com/o/oauth2/auth",
 *   "token_uri": "https://oauth2.googleapis.com/token",
 *   "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
 *   "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/..."
 * }
 */

const fs = require('fs');
const path = require('path');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`✅ ${message}`, 'green');
}

function logError(message) {
  log(`❌ ${message}`, 'red');
}

function logWarning(message) {
  log(`⚠️  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`ℹ️  ${message}`, 'blue');
}

function logStep(message) {
  log(`\n🔧 ${message}`, 'cyan');
}

// Check if firebase-key.json exists
function checkFirebaseKey() {
  const keyPath = path.join(process.cwd(), 'firebase-key.json');
  
  if (!fs.existsSync(keyPath)) {
    logError('firebase-key.json not found in project root!');
    logInfo('Please download your Firebase service account key and save it as "firebase-key.json"');
    logInfo('You can get it from: Firebase Console → Project Settings → Service Accounts → Generate New Private Key');
    process.exit(1);
  }
  
  return keyPath;
}

// Validate Firebase JSON structure
function validateFirebaseKey(keyData) {
  const requiredFields = [
    'type',
    'project_id',
    'private_key_id',
    'private_key',
    'client_email',
    'client_id',
    'auth_uri',
    'token_uri',
    'auth_provider_x509_cert_url',
    'client_x509_cert_url'
  ];
  
  const missingFields = requiredFields.filter(field => !keyData[field]);
  
  if (missingFields.length > 0) {
    logError(`Invalid Firebase key structure. Missing fields: ${missingFields.join(', ')}`);
    logInfo('Please ensure you downloaded the complete service account key from Firebase Console');
    process.exit(1);
  }
  
  if (keyData.type !== 'service_account') {
    logError('Invalid key type. Expected "service_account"');
    process.exit(1);
  }
  
  logSuccess('Firebase key structure is valid');
}

// Generate .env content
function generateEnvContent(keyData) {
  const envContent = `# EcoLogic WebApp Environment Variables
# Generated by setup-env.js on ${new Date().toISOString()}

# Firebase Configuration
FIREBASE_PROJECT_ID=${keyData.project_id}
FIREBASE_PRIVATE_KEY_ID=${keyData.private_key_id}
FIREBASE_PRIVATE_KEY="${keyData.private_key.replace(/\n/g, '\\n')}"
FIREBASE_CLIENT_EMAIL=${keyData.client_email}
FIREBASE_CLIENT_ID=${keyData.client_id}
FIREBASE_AUTH_URI=${keyData.auth_uri}
FIREBASE_TOKEN_URI=${keyData.token_uri}
FIREBASE_AUTH_PROVIDER_X509_CERT_URL=${keyData.auth_provider_x509_cert_url}
FIREBASE_CLIENT_X509_CERT_URL=${keyData.client_x509_cert_url}

# Application Configuration
NODE_ENV=production
PORT=3000

# Caching Configuration
CACHE_DURATION=3600000
REPORTS_CACHE_DURATION=300000

# Fake Data Mode (set to false for production)
USE_FAKE_DATA=false

# API Configuration
API_VERSION=v1
CORS_ORIGIN=*

# Logging
LOG_LEVEL=info
DEBUG=false

# Vercel Configuration
VERCEL_URL=
VERCEL_ENV=production
`;

  return envContent;
}

// Backup existing .env file
function backupExistingEnv() {
  const envPath = path.join(process.cwd(), '.env');
  
  if (fs.existsSync(envPath)) {
    const backupPath = path.join(process.cwd(), `.env.backup.${Date.now()}`);
    fs.copyFileSync(envPath, backupPath);
    logWarning(`Existing .env file backed up to: ${path.basename(backupPath)}`);
  }
}

// Write .env file
function writeEnvFile(content) {
  const envPath = path.join(process.cwd(), '.env');
  
  try {
    fs.writeFileSync(envPath, content, 'utf8');
    logSuccess('.env file created successfully');
    return true;
  } catch (error) {
    logError(`Failed to write .env file: ${error.message}`);
    return false;
  }
}

// Create .env.example file
function createEnvExample() {
  const exampleContent = `# EcoLogic WebApp Environment Variables Example
# Copy this file to .env and fill in your values

# Firebase Configuration (get from Firebase Console → Project Settings → Service Accounts)
FIREBASE_PROJECT_ID=your-project-id
FIREBASE_PRIVATE_KEY_ID=your-private-key-id
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\\nYour private key here\\n-----END PRIVATE KEY-----\\n"
FIREBASE_CLIENT_EMAIL=your-service-account@your-project.iam.gserviceaccount.com
FIREBASE_CLIENT_ID=your-client-id
FIREBASE_AUTH_URI=https://accounts.google.com/o/oauth2/auth
FIREBASE_TOKEN_URI=https://oauth2.googleapis.com/token
FIREBASE_AUTH_PROVIDER_X509_CERT_URL=https://www.googleapis.com/oauth2/v1/certs
FIREBASE_CLIENT_X509_CERT_URL=https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com

# Application Configuration
NODE_ENV=production
PORT=3000

# Caching Configuration
CACHE_DURATION=3600000
REPORTS_CACHE_DURATION=300000

# Fake Data Mode (set to false for production)
USE_FAKE_DATA=false

# API Configuration
API_VERSION=v1
CORS_ORIGIN=*

# Logging
LOG_LEVEL=info
DEBUG=false

# Vercel Configuration
VERCEL_URL=
VERCEL_ENV=production
`;

  const examplePath = path.join(process.cwd(), '.env.example');
  
  try {
    fs.writeFileSync(examplePath, exampleContent, 'utf8');
    logSuccess('.env.example file created');
  } catch (error) {
    logWarning(`Could not create .env.example: ${error.message}`);
  }
}

// Main setup function
function main() {
  log('\n🚀 EcoLogic WebApp Environment Setup', 'bright');
  log('=====================================', 'bright');
  
  try {
    // Step 1: Check for Firebase key
    logStep('Checking for Firebase service account key...');
    const keyPath = checkFirebaseKey();
    
    // Step 2: Read and parse Firebase key
    logStep('Reading Firebase key...');
    const keyData = JSON.parse(fs.readFileSync(keyPath, 'utf8'));
    logSuccess('Firebase key loaded successfully');
    
    // Step 3: Validate Firebase key
    logStep('Validating Firebase key structure...');
    validateFirebaseKey(keyData);
    
    // Step 4: Backup existing .env
    logStep('Backing up existing .env file...');
    backupExistingEnv();
    
    // Step 5: Generate .env content
    logStep('Generating .env file...');
    const envContent = generateEnvContent(keyData);
    
    // Step 6: Write .env file
    logStep('Writing .env file...');
    if (writeEnvFile(envContent)) {
      logSuccess('Environment setup completed successfully!');
    } else {
      process.exit(1);
    }
    
    // Step 7: Create .env.example
    logStep('Creating .env.example file...');
    createEnvExample();
    
    // Step 8: Security reminder
    logStep('Security reminder...');
    logWarning('IMPORTANT: Never commit .env or firebase-key.json to version control!');
    logInfo('These files are already included in .gitignore');
    
    // Step 9: Next steps
    logStep('Next steps:');
    logInfo('1. Verify your .env file contains the correct values');
    logInfo('2. Test your Firebase connection');
    logInfo('3. Deploy to Vercel or your preferred platform');
    logInfo('4. Set environment variables in your deployment platform');
    
    log('\n🎉 Setup complete! Your EcoLogic WebApp is ready to deploy.', 'green');
    
  } catch (error) {
    logError(`Setup failed: ${error.message}`);
    process.exit(1);
  }
}

// Run the setup
if (require.main === module) {
  main();
}

module.exports = {
  checkFirebaseKey,
  validateFirebaseKey,
  generateEnvContent,
  writeEnvFile,
  createEnvExample
};
